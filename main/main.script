RESOURCES = {
	"/resource/UXSample_1920x1080/A Shapes_All_01_1920x1080.json",
	"/resource/UXSample_1920x1080/B Fills_All_01_1920x1080.json",
	"/resource/UXSample_1920x1080/C Strokes_All_01_1920x1080.json",
	"/resource/UXSample_1920x1080/D Transforms_All_01_1920x1080.json",
	"/resource/UXSample_1920x1080/E Interpolation_All_01_1920x1080.json",
	"/resource/UXSample_1920x1080/F Masks_All_01_1920x1080.json",
	"/resource/UXSample_1920x1080/F Masks_All_02_1920x1080.json",
	"/resource/_alarm.json",
	"/resource/3d.json",
	"/resource/360_degree.json",
	"/resource/1643-exploding-star.json",
	"/resource/1667-firework.json",
	"/resource/4479-fireworks.json",
	"/resource/5317-fireworkds.json",
	"/resource/5344-honey-sack-hud.json",
	"/resource/a_cup_of_coffee.json",
	"/resource/a_mountain.json",
	"/resource/abstract_circle.json",
	"/resource/acrobatics.json",
	"/resource/anubis.json",
	"/resource/ao.json",
	"/resource/balloons_with_string.json",
	"/resource/bell.json",
	"/resource/birth_stone_logo.json",
	"/resource/bounching_ball.json",
	"/resource/browser.json",
	"/resource/confetti.json",
	"/resource/cooking.json",
	"/resource/dna.json",
	"/resource/done.json",
	"/resource/dynamic_path_test.json",
	"/resource/dynamic_property.json",
	"/resource/eid_mubarak.json",
	"/resource/emoji_shock.json",
	"/resource/emoji_wink.json",
	"/resource/file_transfer.json",
	"/resource/fingerprint_success.json",
	"/resource/funky_chicken.json",
	"/resource/gears.json",
	"/resource/gears_or_settings.json",
	"/resource/glow_loading.json",
	"/resource/gradient_animated_background.json",
	"/resource/gradient_sleepy_loader.json",
	"/resource/happy.json",
	"/resource/heart.json",
	"/resource/hourglass.json",
	"/resource/image_embedded.json",
	--"/resource/image_test.json",
	"/resource/image_embedded.json",
	"/resource/imprint.json",
	"/resource/Indicators1.json",
	"/resource/insta_camera.json",
	"/resource/intelia_logo_animation.json",
	"/resource/it's_lunch_time!.json",
	"/resource/jolly_walker.json",
	"/resource/leap_frog_loader.json",
	"/resource/like.json",
	"/resource/loader.json",
	"/resource/loader_4.json",
	"/resource/loader_animation.json",
	"/resource/loading.json",
	"/resource/loading_.json",
	"/resource/loading_animation.json",
	"/resource/loading_rectangles.json",
	"/resource/looping_landscape_+_plane_+_clouds.json",
	"/resource/maps.json",
	"/resource/marker.json",
	"/resource/mask.json",
	"/resource/material_wave_loading.json",
	"/resource/matte_two_item_with_lowerlayer.json",
	"/resource/mnemonics.json",
	"/resource/ModernPictogramsForLottie_LoudMute.json",
	"/resource/movie_loading.json",
	"/resource/mughead.json",
	"/resource/night_own.json",
	"/resource/ondas.json",
	"/resource/party_penguin.json",
	"/resource/peli-canon.json",
	"/resource/personal_character.json",
	"/resource/polystar_anim.json",
	"/resource/polystar_line_clockwise_trim.json",
	"/resource/pumped_up.json",
	"/resource/red_box.json",
	"/resource/ripple_loading_animation.json",
	"/resource/settings.json",
	"/resource/spin,_lil_loader_v2.json",
	"/resource/square_wheel.json",
	"/resource/starts_transparent.json",
	"/resource/static_dynamic_dash.json",
	"/resource/StickAndBall.json",
	"/resource/telegram.json",
	"/resource/tile_grid_loading_animation.json",
	"/resource/tractor.json",
	"/resource/triib_manage.json",
	"/resource/waves_.json",
	"/resource/windmill.json",
	"/resource/world_locations.json",
	"/resource/worm.json",
	"/resource/you're_in!.json",
}

RESOURCES_CURRENT = 1

ANIMATION_A = 0

local function load_anim(self,key)
	self.anim = rlottie.animation_load_from_data( sys.load_resource(key),key,true)
	self.time = 0
end

function init(self)
	local w,h = 1000,1000
	self.buffer = buffer.create(w * h, -- size of the buffer width*height
			{{
				 name = hash("my_buffer"),
				 type = buffer.VALUE_TYPE_UINT8,
				 count = 4
			 }})
	--r
	self.resource_path = go.get("#sprite", "texture0")
	self.header = {
		width = w,
		height = h,
		type = resource.TEXTURE_TYPE_2D,
		format = resource.TEXTURE_FORMAT_RGBA,
		num_mip_maps = 1
	}
	self.surface = rlottie.surface_create(w,h,self.buffer)
	self.time = 0
	load_anim(self,RESOURCES[RESOURCES_CURRENT])
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	self.time = self.time + dt
	local a = self.time % self.anim:duration()
	a = a / self.anim:duration()
	ANIMATION_A = a
	self.anim:renderSync(self.anim:frameAtPos(a),self.surface,true)
	resource.set_texture(self.resource_path, self.header, self.buffer)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("next") then
		RESOURCES_CURRENT = RESOURCES_CURRENT + 1 > #RESOURCES  and 1 or RESOURCES_CURRENT + 1
	elseif message_id == hash("prev") then
		RESOURCES_CURRENT = RESOURCES_CURRENT - 1 < 1 and  #RESOURCES or RESOURCES_CURRENT -1
	end
	self.time = 0
	load_anim(self,RESOURCES[RESOURCES_CURRENT])
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
